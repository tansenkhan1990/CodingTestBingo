{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime-corejs2/helpers/esm/objectWithoutPropertiesLoose\";\nimport _inheritsLoose from \"@babel/runtime-corejs2/helpers/esm/inheritsLoose\";\nimport classNames from 'classnames';\nimport React, { cloneElement } from 'react';\nimport elementType from 'prop-types-extra/lib/elementType';\nimport ListGroupItem from './ListGroupItem';\nimport { bsClass, getClassSet, splitBsProps } from './utils/bootstrapUtils';\nimport ValidComponentChildren from './utils/ValidComponentChildren';\nvar propTypes = {\n  /**\n   * You can use a custom element type for this component.\n   *\n   * If not specified, it will be treated as `'li'` if every child is a\n   * non-actionable `<ListGroupItem>`, and `'div'` otherwise.\n   */\n  componentClass: elementType\n};\nfunction getDefaultComponent(children) {\n  if (!children) {\n    // FIXME: This is the old behavior. Is this right?\n    return 'div';\n  }\n  if (ValidComponentChildren.some(children, function (child) {\n    return child.type !== ListGroupItem || child.props.href || child.props.onClick;\n  })) {\n    return 'div';\n  }\n  return 'ul';\n}\nvar ListGroup = /*#__PURE__*/\nfunction (_React$Component) {\n  _inheritsLoose(ListGroup, _React$Component);\n  function ListGroup() {\n    return _React$Component.apply(this, arguments) || this;\n  }\n  var _proto = ListGroup.prototype;\n  _proto.render = function render() {\n    var _this$props = this.props,\n      children = _this$props.children,\n      _this$props$component = _this$props.componentClass,\n      Component = _this$props$component === void 0 ? getDefaultComponent(children) : _this$props$component,\n      className = _this$props.className,\n      props = _objectWithoutPropertiesLoose(_this$props, [\"children\", \"componentClass\", \"className\"]);\n    var _splitBsProps = splitBsProps(props),\n      bsProps = _splitBsProps[0],\n      elementProps = _splitBsProps[1];\n    var classes = getClassSet(bsProps);\n    var useListItem = Component === 'ul' && ValidComponentChildren.every(children, function (child) {\n      return child.type === ListGroupItem;\n    });\n    return React.createElement(Component, _extends({}, elementProps, {\n      className: classNames(className, classes)\n    }), useListItem ? ValidComponentChildren.map(children, function (child) {\n      return cloneElement(child, {\n        listItem: true\n      });\n    }) : children);\n  };\n  return ListGroup;\n}(React.Component);\nListGroup.propTypes = propTypes;\nexport default bsClass('list-group', ListGroup);","map":{"version":3,"names":["_extends","_objectWithoutPropertiesLoose","_inheritsLoose","classNames","React","cloneElement","elementType","ListGroupItem","bsClass","getClassSet","splitBsProps","ValidComponentChildren","propTypes","componentClass","getDefaultComponent","children","some","child","type","props","href","onClick","ListGroup","_React$Component","apply","arguments","_proto","prototype","render","_this$props","_this$props$component","Component","className","_splitBsProps","bsProps","elementProps","classes","useListItem","every","createElement","map","listItem"],"sources":["/home/tansen/my documents/practice/code-challenge-app/node_modules/react-bootstrap/es/ListGroup.js"],"sourcesContent":["import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime-corejs2/helpers/esm/objectWithoutPropertiesLoose\";\nimport _inheritsLoose from \"@babel/runtime-corejs2/helpers/esm/inheritsLoose\";\nimport classNames from 'classnames';\nimport React, { cloneElement } from 'react';\nimport elementType from 'prop-types-extra/lib/elementType';\nimport ListGroupItem from './ListGroupItem';\nimport { bsClass, getClassSet, splitBsProps } from './utils/bootstrapUtils';\nimport ValidComponentChildren from './utils/ValidComponentChildren';\nvar propTypes = {\n  /**\n   * You can use a custom element type for this component.\n   *\n   * If not specified, it will be treated as `'li'` if every child is a\n   * non-actionable `<ListGroupItem>`, and `'div'` otherwise.\n   */\n  componentClass: elementType\n};\n\nfunction getDefaultComponent(children) {\n  if (!children) {\n    // FIXME: This is the old behavior. Is this right?\n    return 'div';\n  }\n\n  if (ValidComponentChildren.some(children, function (child) {\n    return child.type !== ListGroupItem || child.props.href || child.props.onClick;\n  })) {\n    return 'div';\n  }\n\n  return 'ul';\n}\n\nvar ListGroup =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inheritsLoose(ListGroup, _React$Component);\n\n  function ListGroup() {\n    return _React$Component.apply(this, arguments) || this;\n  }\n\n  var _proto = ListGroup.prototype;\n\n  _proto.render = function render() {\n    var _this$props = this.props,\n        children = _this$props.children,\n        _this$props$component = _this$props.componentClass,\n        Component = _this$props$component === void 0 ? getDefaultComponent(children) : _this$props$component,\n        className = _this$props.className,\n        props = _objectWithoutPropertiesLoose(_this$props, [\"children\", \"componentClass\", \"className\"]);\n\n    var _splitBsProps = splitBsProps(props),\n        bsProps = _splitBsProps[0],\n        elementProps = _splitBsProps[1];\n\n    var classes = getClassSet(bsProps);\n    var useListItem = Component === 'ul' && ValidComponentChildren.every(children, function (child) {\n      return child.type === ListGroupItem;\n    });\n    return React.createElement(Component, _extends({}, elementProps, {\n      className: classNames(className, classes)\n    }), useListItem ? ValidComponentChildren.map(children, function (child) {\n      return cloneElement(child, {\n        listItem: true\n      });\n    }) : children);\n  };\n\n  return ListGroup;\n}(React.Component);\n\nListGroup.propTypes = propTypes;\nexport default bsClass('list-group', ListGroup);"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}