{"ast":null,"code":"import _objectWithoutPropertiesLoose from \"@babel/runtime-corejs2/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _inheritsLoose from \"@babel/runtime-corejs2/helpers/esm/inheritsLoose\";\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\nimport React, { cloneElement } from 'react';\nimport uncontrollable from 'uncontrollable';\nimport { bsClass, getClassSet, splitBsPropsAndOmit } from './utils/bootstrapUtils';\nimport ValidComponentChildren from './utils/ValidComponentChildren';\nimport { generatedId } from './utils/PropTypes';\nvar propTypes = {\n  accordion: PropTypes.bool,\n  /**\n   * When `accordion` is enabled, `activeKey` controls the which child `Panel` is expanded. `activeKey` should\n   * match a child Panel `eventKey` prop exactly.\n   *\n   * @controllable onSelect\n   */\n  activeKey: PropTypes.any,\n  /**\n   * A callback fired when a child Panel collapse state changes. It's called with the next expanded `activeKey`\n   *\n   * @controllable activeKey\n   */\n  onSelect: PropTypes.func,\n  /**\n   * An HTML role attribute\n   */\n  role: PropTypes.string,\n  /**\n   * A function that takes an eventKey and type and returns a\n   * unique id for each Panel heading and Panel Collapse. The function _must_ be a pure function,\n   * meaning it should always return the _same_ id for the same set of inputs. The default\n   * value requires that an `id` to be set for the PanelGroup.\n   *\n   * The `type` argument will either be `\"body\"` or `\"heading\"`.\n   *\n   * @defaultValue (eventKey, type) => `${this.props.id}-${type}-${key}`\n   */\n  generateChildId: PropTypes.func,\n  /**\n   * HTML id attribute, required if no `generateChildId` prop\n   * is specified.\n   */\n  id: generatedId('PanelGroup')\n};\nvar defaultProps = {\n  accordion: false\n};\nvar childContextTypes = {\n  $bs_panelGroup: PropTypes.shape({\n    getId: PropTypes.func,\n    headerRole: PropTypes.string,\n    panelRole: PropTypes.string,\n    activeKey: PropTypes.any,\n    onToggle: PropTypes.func\n  })\n};\nvar PanelGroup = /*#__PURE__*/\nfunction (_React$Component) {\n  _inheritsLoose(PanelGroup, _React$Component);\n  function PanelGroup() {\n    var _this;\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;\n    _this.handleSelect = function (key, expanded, e) {\n      if (expanded) {\n        _this.props.onSelect(key, e);\n      } else if (_this.props.activeKey === key) {\n        _this.props.onSelect(null, e);\n      }\n    };\n    return _this;\n  }\n  var _proto = PanelGroup.prototype;\n  _proto.getChildContext = function getChildContext() {\n    var _this$props = this.props,\n      activeKey = _this$props.activeKey,\n      accordion = _this$props.accordion,\n      generateChildId = _this$props.generateChildId,\n      id = _this$props.id;\n    var getId = null;\n    if (accordion) {\n      getId = generateChildId || function (key, type) {\n        return id ? id + \"-\" + type + \"-\" + key : null;\n      };\n    }\n    return {\n      $bs_panelGroup: _extends({\n        getId: getId,\n        headerRole: 'tab',\n        panelRole: 'tabpanel'\n      }, accordion && {\n        activeKey: activeKey,\n        onToggle: this.handleSelect\n      })\n    };\n  };\n  _proto.render = function render() {\n    var _this$props2 = this.props,\n      accordion = _this$props2.accordion,\n      className = _this$props2.className,\n      children = _this$props2.children,\n      props = _objectWithoutPropertiesLoose(_this$props2, [\"accordion\", \"className\", \"children\"]);\n    var _splitBsPropsAndOmit = splitBsPropsAndOmit(props, ['onSelect', 'activeKey']),\n      bsProps = _splitBsPropsAndOmit[0],\n      elementProps = _splitBsPropsAndOmit[1];\n    if (accordion) {\n      elementProps.role = elementProps.role || 'tablist';\n    }\n    var classes = getClassSet(bsProps);\n    return React.createElement(\"div\", _extends({}, elementProps, {\n      className: classNames(className, classes)\n    }), ValidComponentChildren.map(children, function (child) {\n      return cloneElement(child, {\n        bsStyle: child.props.bsStyle || bsProps.bsStyle\n      });\n    }));\n  };\n  return PanelGroup;\n}(React.Component);\nPanelGroup.propTypes = propTypes;\nPanelGroup.defaultProps = defaultProps;\nPanelGroup.childContextTypes = childContextTypes;\nexport default uncontrollable(bsClass('panel-group', PanelGroup), {\n  activeKey: 'onSelect'\n});","map":{"version":3,"names":["_objectWithoutPropertiesLoose","_extends","_inheritsLoose","classNames","PropTypes","React","cloneElement","uncontrollable","bsClass","getClassSet","splitBsPropsAndOmit","ValidComponentChildren","generatedId","propTypes","accordion","bool","activeKey","any","onSelect","func","role","string","generateChildId","id","defaultProps","childContextTypes","$bs_panelGroup","shape","getId","headerRole","panelRole","onToggle","PanelGroup","_React$Component","_this","_len","arguments","length","args","Array","_key","call","apply","concat","handleSelect","key","expanded","e","props","_proto","prototype","getChildContext","_this$props","type","render","_this$props2","className","children","_splitBsPropsAndOmit","bsProps","elementProps","classes","createElement","map","child","bsStyle","Component"],"sources":["/home/tansen/my documents/practice/code-challenge-app/node_modules/react-bootstrap/es/PanelGroup.js"],"sourcesContent":["import _objectWithoutPropertiesLoose from \"@babel/runtime-corejs2/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _inheritsLoose from \"@babel/runtime-corejs2/helpers/esm/inheritsLoose\";\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\nimport React, { cloneElement } from 'react';\nimport uncontrollable from 'uncontrollable';\nimport { bsClass, getClassSet, splitBsPropsAndOmit } from './utils/bootstrapUtils';\nimport ValidComponentChildren from './utils/ValidComponentChildren';\nimport { generatedId } from './utils/PropTypes';\nvar propTypes = {\n  accordion: PropTypes.bool,\n\n  /**\n   * When `accordion` is enabled, `activeKey` controls the which child `Panel` is expanded. `activeKey` should\n   * match a child Panel `eventKey` prop exactly.\n   *\n   * @controllable onSelect\n   */\n  activeKey: PropTypes.any,\n\n  /**\n   * A callback fired when a child Panel collapse state changes. It's called with the next expanded `activeKey`\n   *\n   * @controllable activeKey\n   */\n  onSelect: PropTypes.func,\n\n  /**\n   * An HTML role attribute\n   */\n  role: PropTypes.string,\n\n  /**\n   * A function that takes an eventKey and type and returns a\n   * unique id for each Panel heading and Panel Collapse. The function _must_ be a pure function,\n   * meaning it should always return the _same_ id for the same set of inputs. The default\n   * value requires that an `id` to be set for the PanelGroup.\n   *\n   * The `type` argument will either be `\"body\"` or `\"heading\"`.\n   *\n   * @defaultValue (eventKey, type) => `${this.props.id}-${type}-${key}`\n   */\n  generateChildId: PropTypes.func,\n\n  /**\n   * HTML id attribute, required if no `generateChildId` prop\n   * is specified.\n   */\n  id: generatedId('PanelGroup')\n};\nvar defaultProps = {\n  accordion: false\n};\nvar childContextTypes = {\n  $bs_panelGroup: PropTypes.shape({\n    getId: PropTypes.func,\n    headerRole: PropTypes.string,\n    panelRole: PropTypes.string,\n    activeKey: PropTypes.any,\n    onToggle: PropTypes.func\n  })\n};\n\nvar PanelGroup =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inheritsLoose(PanelGroup, _React$Component);\n\n  function PanelGroup() {\n    var _this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;\n\n    _this.handleSelect = function (key, expanded, e) {\n      if (expanded) {\n        _this.props.onSelect(key, e);\n      } else if (_this.props.activeKey === key) {\n        _this.props.onSelect(null, e);\n      }\n    };\n\n    return _this;\n  }\n\n  var _proto = PanelGroup.prototype;\n\n  _proto.getChildContext = function getChildContext() {\n    var _this$props = this.props,\n        activeKey = _this$props.activeKey,\n        accordion = _this$props.accordion,\n        generateChildId = _this$props.generateChildId,\n        id = _this$props.id;\n    var getId = null;\n\n    if (accordion) {\n      getId = generateChildId || function (key, type) {\n        return id ? id + \"-\" + type + \"-\" + key : null;\n      };\n    }\n\n    return {\n      $bs_panelGroup: _extends({\n        getId: getId,\n        headerRole: 'tab',\n        panelRole: 'tabpanel'\n      }, accordion && {\n        activeKey: activeKey,\n        onToggle: this.handleSelect\n      })\n    };\n  };\n\n  _proto.render = function render() {\n    var _this$props2 = this.props,\n        accordion = _this$props2.accordion,\n        className = _this$props2.className,\n        children = _this$props2.children,\n        props = _objectWithoutPropertiesLoose(_this$props2, [\"accordion\", \"className\", \"children\"]);\n\n    var _splitBsPropsAndOmit = splitBsPropsAndOmit(props, ['onSelect', 'activeKey']),\n        bsProps = _splitBsPropsAndOmit[0],\n        elementProps = _splitBsPropsAndOmit[1];\n\n    if (accordion) {\n      elementProps.role = elementProps.role || 'tablist';\n    }\n\n    var classes = getClassSet(bsProps);\n    return React.createElement(\"div\", _extends({}, elementProps, {\n      className: classNames(className, classes)\n    }), ValidComponentChildren.map(children, function (child) {\n      return cloneElement(child, {\n        bsStyle: child.props.bsStyle || bsProps.bsStyle\n      });\n    }));\n  };\n\n  return PanelGroup;\n}(React.Component);\n\nPanelGroup.propTypes = propTypes;\nPanelGroup.defaultProps = defaultProps;\nPanelGroup.childContextTypes = childContextTypes;\nexport default uncontrollable(bsClass('panel-group', PanelGroup), {\n  activeKey: 'onSelect'\n});"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}