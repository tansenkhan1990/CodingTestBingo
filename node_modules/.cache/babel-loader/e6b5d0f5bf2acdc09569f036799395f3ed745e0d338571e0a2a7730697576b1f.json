{"ast":null,"code":"var _jsxFileName = \"/home/tansen/my documents/practice/bingo test/src/Components/Pages/Home.js\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport EndGame from \"./EndGame\";\nimport Square from \"./Square\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst INITIAL = \"\";\nconst winCombination = [[0, 1, 2, 3, 4], [5, 6, 7, 8, 9], [10, 11, 12, 13, 14], [15, 16, 17, 18, 19], [20, 21, 22, 23, 24], [0, 5, 10, 15, 20], [1, 6, 11, 16, 21], [2, 7, 12, 17, 22], [3, 8, 13, 18, 23], [4, 9, 14, 19, 24], [4, 8, 12, 16, 20], [0, 6, 12, 18, 24]];\nfunction Bingo() {\n  _s();\n  const ARRAY_LENGTH = 25;\n  const randomArray = [];\n\n  // while(randomArray.length < ARRAY_LENGTH){\n  //     var r = Math.floor(Math.random() * 75) + 1;\n  //     if(randomArray.indexOf(r) === -1) randomArray.push(r);\n  // }\n\n  for (let i = 1; i < 75; i++) {\n    randomArray[i] = i;\n  }\n  const shuffledArray = randomArray.sort((a, b) => 0.5 - Math.random());\n  const [grid, setGrid] = useState(Array(25).fill(INITIAL));\n  const [player, setPlayer] = useState(false);\n  const [gameFinished, setGameFinished] = useState(false);\n  const [winCount, setwinCount] = useState({\n    X: 0\n  });\n  function isGameOver() {\n    if (!gameFinished) {\n      grid[winCombination[2][2]] = \"Center\";\n      for (let i = 0; i < 12; i++) {\n        if (grid[winCombination[i][0]] !== INITIAL && grid[winCombination[i][1]] !== INITIAL && grid[winCombination[i][2]] !== INITIAL && grid[winCombination[i][3]] !== INITIAL && grid[winCombination[i][4]] !== INITIAL) {\n          setGameFinished(true);\n          setwinCount({\n            ...winCount,\n            X: winCount.X + 1\n          });\n          console.log(\"X WON\");\n          return;\n        }\n      }\n    }\n  }\n  function restartGame() {\n    setGrid(Array(25).fill(INITIAL));\n    setGameFinished(false);\n  }\n  function clearHistory() {\n    setwinCount({\n      X: 0\n    });\n    restartGame();\n  }\n  isGameOver();\n  function handleClick(id) {\n    setGrid(grid.map((item, index) => {\n      if (index === id) {\n        return shuffledArray[id];\n      } else {\n        return item;\n      }\n    }));\n    setPlayer(player);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"win-history\",\n      children: [\"X's WINS: \", winCount.X]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this), gameFinished && /*#__PURE__*/_jsxDEV(EndGame, {\n      winCount: winCount,\n      restartGame: restartGame,\n      player: player,\n      clearHistory: clearHistory\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Square, {\n      clickedArray: grid,\n      handleClick: handleClick\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 5\n  }, this);\n}\n_s(Bingo, \"bpceh90AQku9v4buz9dtIPrDoRg=\");\n_c = Bingo;\nexport default Bingo;\nvar _c;\n$RefreshReg$(_c, \"Bingo\");","map":{"version":3,"names":["useState","EndGame","Square","INITIAL","winCombination","Bingo","ARRAY_LENGTH","randomArray","i","shuffledArray","sort","a","b","Math","random","grid","setGrid","Array","fill","player","setPlayer","gameFinished","setGameFinished","winCount","setwinCount","X","isGameOver","console","log","restartGame","clearHistory","handleClick","id","map","item","index"],"sources":["/home/tansen/my documents/practice/bingo test/src/Components/Pages/Home.js"],"sourcesContent":["import { useState } from \"react\";\nimport EndGame from \"./EndGame\";\nimport Square from \"./Square\";\n\nconst INITIAL = \"\";\nconst winCombination = [\n\n  [0,1,2,3,4],\n  [5,6,7,8,9],\n  [10,11,12,13,14],\n  [15,16,17,18,19],\n  [20,21,22,23,24],\n  [0,5,10,15,20],\n  [1,6,11,16,21],\n  [2,7,12,17,22],\n  [3,8,13,18,23],\n  [4,9,14,19,24],\n  [4,8,12,16,20],\n  [0,6,12,18,24],\n  \n];\n\nfunction Bingo() {\n  const ARRAY_LENGTH = 25\n  const randomArray = []\n   \n\n// while(randomArray.length < ARRAY_LENGTH){\n//     var r = Math.floor(Math.random() * 75) + 1;\n//     if(randomArray.indexOf(r) === -1) randomArray.push(r);\n// }\n\nfor(let i = 1; i < 75; i++)\n{\n  randomArray[i] = i;\n}\nconst shuffledArray = randomArray.sort((a, b) => 0.5 - Math.random());\n  const [grid, setGrid] = useState(Array(25).fill(INITIAL));\n  const [player, setPlayer] = useState(false);\n  const [gameFinished, setGameFinished] = useState(false);\n  const [winCount, setwinCount] = useState({ X: 0 });\n\n  function isGameOver() {\n    if (!gameFinished) {\n      grid[winCombination[2][2]] = \"Center\";\n      for (let i = 0; i < 12; i++) {        \n        if (\n          grid[winCombination[i][0]] !== INITIAL &&\n          grid[winCombination[i][1]] !== INITIAL &&\n          grid[winCombination[i][2]] !== INITIAL &&\n          grid[winCombination[i][3]] !== INITIAL &&\n          grid[winCombination[i][4]] !== INITIAL \n        ) {\n          setGameFinished(true);\n          setwinCount({ ...winCount, X: winCount.X + 1 });\n          console.log(\"X WON\");\n          return;\n        }\n      }\n     }\n  }\n\n  function restartGame() {\n    setGrid(Array(25).fill(INITIAL));\n    setGameFinished(false);\n  }\n\n  function clearHistory() {\n    setwinCount({ X: 0 });\n    restartGame();\n  }\n\n  isGameOver();\n\n  function handleClick(id) {\n    setGrid(\n      grid.map((item, index) => {\n        if (index === id) {\n            return shuffledArray[id];\n        } \n        else {\n           return item;\n        }\n      })\n    );\n    setPlayer(player);\n  }\n\n  return (\n    <div>\n      <span className=\"win-history\">\n        X's WINS: {winCount.X}\n      </span>\n      {gameFinished && (\n        <EndGame\n          winCount={winCount}\n          restartGame={restartGame}\n          player={player}\n          clearHistory={clearHistory}\n        />\n      )}\n      <Square clickedArray={grid} handleClick={handleClick} />\n    </div>\n  );\n}\n\nexport default Bingo;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}