{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime-corejs2/helpers/esm/objectWithoutPropertiesLoose\";\nimport _inheritsLoose from \"@babel/runtime-corejs2/helpers/esm/inheritsLoose\";\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport invariant from 'invariant';\nimport uncontrollable from 'uncontrollable';\nimport chainFunction from './utils/createChainedFunction';\nimport ValidChildren from './utils/ValidComponentChildren';\nimport ButtonGroup from './ButtonGroup';\nimport ToggleButton from './ToggleButton';\nvar propTypes = {\n  /**\n   * An HTML `<input>` name for each child button.\n   *\n   * __Required if `type` is set to `'radio'`__\n   */\n  name: PropTypes.string,\n  /**\n   * The value, or array of values, of the active (pressed) buttons\n   *\n   * @controllable onChange\n   */\n  value: PropTypes.any,\n  /**\n   * Callback fired when a button is pressed, depending on whether the `type`\n   * is `'radio'` or `'checkbox'`, `onChange` will be called with the value or\n   * array of active values\n   *\n   * @controllable values\n   */\n  onChange: PropTypes.func,\n  /**\n   * The input `type` of the rendered buttons, determines the toggle behavior\n   * of the buttons\n   */\n  type: PropTypes.oneOf(['checkbox', 'radio']).isRequired\n};\nvar defaultProps = {\n  type: 'radio'\n};\nvar ToggleButtonGroup = /*#__PURE__*/\nfunction (_React$Component) {\n  _inheritsLoose(ToggleButtonGroup, _React$Component);\n  function ToggleButtonGroup() {\n    return _React$Component.apply(this, arguments) || this;\n  }\n  var _proto = ToggleButtonGroup.prototype;\n  _proto.getValues = function getValues() {\n    var value = this.props.value;\n    return value == null ? [] : [].concat(value);\n  };\n  _proto.handleToggle = function handleToggle(value) {\n    var _this$props = this.props,\n      type = _this$props.type,\n      onChange = _this$props.onChange;\n    var values = this.getValues();\n    var isActive = values.indexOf(value) !== -1;\n    if (type === 'radio') {\n      if (!isActive) {\n        onChange(value);\n      }\n      return;\n    }\n    if (isActive) {\n      onChange(values.filter(function (n) {\n        return n !== value;\n      }));\n    } else {\n      onChange(values.concat([value]));\n    }\n  };\n  _proto.render = function render() {\n    var _this = this;\n    var _this$props2 = this.props,\n      children = _this$props2.children,\n      type = _this$props2.type,\n      name = _this$props2.name,\n      props = _objectWithoutPropertiesLoose(_this$props2, [\"children\", \"type\", \"name\"]);\n    var values = this.getValues();\n    !(type !== 'radio' || !!name) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'A `name` is required to group the toggle buttons when the `type` ' + 'is set to \"radio\"') : invariant(false) : void 0;\n    delete props.onChange;\n    delete props.value; // the data attribute is required b/c twbs css uses it in the selector\n\n    return React.createElement(ButtonGroup, _extends({}, props, {\n      \"data-toggle\": \"buttons\"\n    }), ValidChildren.map(children, function (child) {\n      var _child$props = child.props,\n        value = _child$props.value,\n        onChange = _child$props.onChange;\n      var handler = function handler() {\n        return _this.handleToggle(value);\n      };\n      return React.cloneElement(child, {\n        type: type,\n        name: child.name || name,\n        checked: values.indexOf(value) !== -1,\n        onChange: chainFunction(onChange, handler)\n      });\n    }));\n  };\n  return ToggleButtonGroup;\n}(React.Component);\nToggleButtonGroup.propTypes = propTypes;\nToggleButtonGroup.defaultProps = defaultProps;\nvar UncontrolledToggleButtonGroup = uncontrollable(ToggleButtonGroup, {\n  value: 'onChange'\n});\nUncontrolledToggleButtonGroup.Button = ToggleButton;\nexport default UncontrolledToggleButtonGroup;","map":{"version":3,"names":["_extends","_objectWithoutPropertiesLoose","_inheritsLoose","PropTypes","React","invariant","uncontrollable","chainFunction","ValidChildren","ButtonGroup","ToggleButton","propTypes","name","string","value","any","onChange","func","type","oneOf","isRequired","defaultProps","ToggleButtonGroup","_React$Component","apply","arguments","_proto","prototype","getValues","props","concat","handleToggle","_this$props","values","isActive","indexOf","filter","n","render","_this","_this$props2","children","process","env","NODE_ENV","createElement","map","child","_child$props","handler","cloneElement","checked","Component","UncontrolledToggleButtonGroup","Button"],"sources":["/home/tansen/my documents/practice/code-challenge-app/node_modules/react-bootstrap/es/ToggleButtonGroup.js"],"sourcesContent":["import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime-corejs2/helpers/esm/objectWithoutPropertiesLoose\";\nimport _inheritsLoose from \"@babel/runtime-corejs2/helpers/esm/inheritsLoose\";\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport invariant from 'invariant';\nimport uncontrollable from 'uncontrollable';\nimport chainFunction from './utils/createChainedFunction';\nimport ValidChildren from './utils/ValidComponentChildren';\nimport ButtonGroup from './ButtonGroup';\nimport ToggleButton from './ToggleButton';\nvar propTypes = {\n  /**\n   * An HTML `<input>` name for each child button.\n   *\n   * __Required if `type` is set to `'radio'`__\n   */\n  name: PropTypes.string,\n\n  /**\n   * The value, or array of values, of the active (pressed) buttons\n   *\n   * @controllable onChange\n   */\n  value: PropTypes.any,\n\n  /**\n   * Callback fired when a button is pressed, depending on whether the `type`\n   * is `'radio'` or `'checkbox'`, `onChange` will be called with the value or\n   * array of active values\n   *\n   * @controllable values\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * The input `type` of the rendered buttons, determines the toggle behavior\n   * of the buttons\n   */\n  type: PropTypes.oneOf(['checkbox', 'radio']).isRequired\n};\nvar defaultProps = {\n  type: 'radio'\n};\n\nvar ToggleButtonGroup =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inheritsLoose(ToggleButtonGroup, _React$Component);\n\n  function ToggleButtonGroup() {\n    return _React$Component.apply(this, arguments) || this;\n  }\n\n  var _proto = ToggleButtonGroup.prototype;\n\n  _proto.getValues = function getValues() {\n    var value = this.props.value;\n    return value == null ? [] : [].concat(value);\n  };\n\n  _proto.handleToggle = function handleToggle(value) {\n    var _this$props = this.props,\n        type = _this$props.type,\n        onChange = _this$props.onChange;\n    var values = this.getValues();\n    var isActive = values.indexOf(value) !== -1;\n\n    if (type === 'radio') {\n      if (!isActive) {\n        onChange(value);\n      }\n\n      return;\n    }\n\n    if (isActive) {\n      onChange(values.filter(function (n) {\n        return n !== value;\n      }));\n    } else {\n      onChange(values.concat([value]));\n    }\n  };\n\n  _proto.render = function render() {\n    var _this = this;\n\n    var _this$props2 = this.props,\n        children = _this$props2.children,\n        type = _this$props2.type,\n        name = _this$props2.name,\n        props = _objectWithoutPropertiesLoose(_this$props2, [\"children\", \"type\", \"name\"]);\n\n    var values = this.getValues();\n    !(type !== 'radio' || !!name) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'A `name` is required to group the toggle buttons when the `type` ' + 'is set to \"radio\"') : invariant(false) : void 0;\n    delete props.onChange;\n    delete props.value; // the data attribute is required b/c twbs css uses it in the selector\n\n    return React.createElement(ButtonGroup, _extends({}, props, {\n      \"data-toggle\": \"buttons\"\n    }), ValidChildren.map(children, function (child) {\n      var _child$props = child.props,\n          value = _child$props.value,\n          onChange = _child$props.onChange;\n\n      var handler = function handler() {\n        return _this.handleToggle(value);\n      };\n\n      return React.cloneElement(child, {\n        type: type,\n        name: child.name || name,\n        checked: values.indexOf(value) !== -1,\n        onChange: chainFunction(onChange, handler)\n      });\n    }));\n  };\n\n  return ToggleButtonGroup;\n}(React.Component);\n\nToggleButtonGroup.propTypes = propTypes;\nToggleButtonGroup.defaultProps = defaultProps;\nvar UncontrolledToggleButtonGroup = uncontrollable(ToggleButtonGroup, {\n  value: 'onChange'\n});\nUncontrolledToggleButtonGroup.Button = ToggleButton;\nexport default UncontrolledToggleButtonGroup;"],"mappings":"AAAA,OAAOA,QAAQ,MAAM,4CAA4C;AACjE,OAAOC,6BAA6B,MAAM,iEAAiE;AAC3G,OAAOC,cAAc,MAAM,kDAAkD;AAC7E,OAAOC,SAAS,MAAM,YAAY;AAClC,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,SAAS,MAAM,WAAW;AACjC,OAAOC,cAAc,MAAM,gBAAgB;AAC3C,OAAOC,aAAa,MAAM,+BAA+B;AACzD,OAAOC,aAAa,MAAM,gCAAgC;AAC1D,OAAOC,WAAW,MAAM,eAAe;AACvC,OAAOC,YAAY,MAAM,gBAAgB;AACzC,IAAIC,SAAS,GAAG;EACd;AACF;AACA;AACA;AACA;EACEC,IAAI,EAAET,SAAS,CAACU,MAAM;EAEtB;AACF;AACA;AACA;AACA;EACEC,KAAK,EAAEX,SAAS,CAACY,GAAG;EAEpB;AACF;AACA;AACA;AACA;AACA;AACA;EACEC,QAAQ,EAAEb,SAAS,CAACc,IAAI;EAExB;AACF;AACA;AACA;EACEC,IAAI,EAAEf,SAAS,CAACgB,KAAK,CAAC,CAAC,UAAU,EAAE,OAAO,CAAC,CAAC,CAACC;AAC/C,CAAC;AACD,IAAIC,YAAY,GAAG;EACjBH,IAAI,EAAE;AACR,CAAC;AAED,IAAII,iBAAiB,GACrB;AACA,UAAUC,gBAAgB,EAAE;EAC1BrB,cAAc,CAACoB,iBAAiB,EAAEC,gBAAgB,CAAC;EAEnD,SAASD,iBAAiB,GAAG;IAC3B,OAAOC,gBAAgB,CAACC,KAAK,CAAC,IAAI,EAAEC,SAAS,CAAC,IAAI,IAAI;EACxD;EAEA,IAAIC,MAAM,GAAGJ,iBAAiB,CAACK,SAAS;EAExCD,MAAM,CAACE,SAAS,GAAG,SAASA,SAAS,GAAG;IACtC,IAAId,KAAK,GAAG,IAAI,CAACe,KAAK,CAACf,KAAK;IAC5B,OAAOA,KAAK,IAAI,IAAI,GAAG,EAAE,GAAG,EAAE,CAACgB,MAAM,CAAChB,KAAK,CAAC;EAC9C,CAAC;EAEDY,MAAM,CAACK,YAAY,GAAG,SAASA,YAAY,CAACjB,KAAK,EAAE;IACjD,IAAIkB,WAAW,GAAG,IAAI,CAACH,KAAK;MACxBX,IAAI,GAAGc,WAAW,CAACd,IAAI;MACvBF,QAAQ,GAAGgB,WAAW,CAAChB,QAAQ;IACnC,IAAIiB,MAAM,GAAG,IAAI,CAACL,SAAS,EAAE;IAC7B,IAAIM,QAAQ,GAAGD,MAAM,CAACE,OAAO,CAACrB,KAAK,CAAC,KAAK,CAAC,CAAC;IAE3C,IAAII,IAAI,KAAK,OAAO,EAAE;MACpB,IAAI,CAACgB,QAAQ,EAAE;QACblB,QAAQ,CAACF,KAAK,CAAC;MACjB;MAEA;IACF;IAEA,IAAIoB,QAAQ,EAAE;MACZlB,QAAQ,CAACiB,MAAM,CAACG,MAAM,CAAC,UAAUC,CAAC,EAAE;QAClC,OAAOA,CAAC,KAAKvB,KAAK;MACpB,CAAC,CAAC,CAAC;IACL,CAAC,MAAM;MACLE,QAAQ,CAACiB,MAAM,CAACH,MAAM,CAAC,CAAChB,KAAK,CAAC,CAAC,CAAC;IAClC;EACF,CAAC;EAEDY,MAAM,CAACY,MAAM,GAAG,SAASA,MAAM,GAAG;IAChC,IAAIC,KAAK,GAAG,IAAI;IAEhB,IAAIC,YAAY,GAAG,IAAI,CAACX,KAAK;MACzBY,QAAQ,GAAGD,YAAY,CAACC,QAAQ;MAChCvB,IAAI,GAAGsB,YAAY,CAACtB,IAAI;MACxBN,IAAI,GAAG4B,YAAY,CAAC5B,IAAI;MACxBiB,KAAK,GAAG5B,6BAA6B,CAACuC,YAAY,EAAE,CAAC,UAAU,EAAE,MAAM,EAAE,MAAM,CAAC,CAAC;IAErF,IAAIP,MAAM,GAAG,IAAI,CAACL,SAAS,EAAE;IAC7B,EAAEV,IAAI,KAAK,OAAO,IAAI,CAAC,CAACN,IAAI,CAAC,GAAG8B,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,GAAGvC,SAAS,CAAC,KAAK,EAAE,mEAAmE,GAAG,mBAAmB,CAAC,GAAGA,SAAS,CAAC,KAAK,CAAC,GAAG,KAAK,CAAC;IAC/M,OAAOwB,KAAK,CAACb,QAAQ;IACrB,OAAOa,KAAK,CAACf,KAAK,CAAC,CAAC;;IAEpB,OAAOV,KAAK,CAACyC,aAAa,CAACpC,WAAW,EAAET,QAAQ,CAAC,CAAC,CAAC,EAAE6B,KAAK,EAAE;MAC1D,aAAa,EAAE;IACjB,CAAC,CAAC,EAAErB,aAAa,CAACsC,GAAG,CAACL,QAAQ,EAAE,UAAUM,KAAK,EAAE;MAC/C,IAAIC,YAAY,GAAGD,KAAK,CAAClB,KAAK;QAC1Bf,KAAK,GAAGkC,YAAY,CAAClC,KAAK;QAC1BE,QAAQ,GAAGgC,YAAY,CAAChC,QAAQ;MAEpC,IAAIiC,OAAO,GAAG,SAASA,OAAO,GAAG;QAC/B,OAAOV,KAAK,CAACR,YAAY,CAACjB,KAAK,CAAC;MAClC,CAAC;MAED,OAAOV,KAAK,CAAC8C,YAAY,CAACH,KAAK,EAAE;QAC/B7B,IAAI,EAAEA,IAAI;QACVN,IAAI,EAAEmC,KAAK,CAACnC,IAAI,IAAIA,IAAI;QACxBuC,OAAO,EAAElB,MAAM,CAACE,OAAO,CAACrB,KAAK,CAAC,KAAK,CAAC,CAAC;QACrCE,QAAQ,EAAET,aAAa,CAACS,QAAQ,EAAEiC,OAAO;MAC3C,CAAC,CAAC;IACJ,CAAC,CAAC,CAAC;EACL,CAAC;EAED,OAAO3B,iBAAiB;AAC1B,CAAC,CAAClB,KAAK,CAACgD,SAAS,CAAC;AAElB9B,iBAAiB,CAACX,SAAS,GAAGA,SAAS;AACvCW,iBAAiB,CAACD,YAAY,GAAGA,YAAY;AAC7C,IAAIgC,6BAA6B,GAAG/C,cAAc,CAACgB,iBAAiB,EAAE;EACpER,KAAK,EAAE;AACT,CAAC,CAAC;AACFuC,6BAA6B,CAACC,MAAM,GAAG5C,YAAY;AACnD,eAAe2C,6BAA6B"},"metadata":{},"sourceType":"module","externalDependencies":[]}